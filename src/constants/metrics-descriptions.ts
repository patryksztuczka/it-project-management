export const metricsDescriptions = {
  linesOfCode:
    "Metryka linii kodu (LoC) odgrywa kluczową rolę w ocenie rozmiaru i złożoności bazy kodu. Ta metryka zlicza liczbę linii zawierających rzeczywisty kod, z wyłączeniem pustych linii. Zapewnia ilościową miarę bazy kodu, oferując wgląd w jego skalę i potencjalne wymagania konserwacyjne. Analizując LoC, zespoły mogą podejmować świadome decyzje dotyczące potrzeb refaktoryzacji, identyfikować obszary rozdętego kodu i utrzymywać równowagę między funkcjonalnością a prostotą. Należy zauważyć, że chociaż wyższy poziom LoC może wskazywać na większą i bogatszą w funkcje aplikację, może również sugerować większą złożoność i potencjalne wyzwania w zarządzaniu kodem i skalowalności.",
  statements:
    "Liczba instrukcji jest kluczową miarą oceny szczegółowości i obciążenia funkcjonalnego bazy kodu. Zliczane są instrukcje wykonywane w kodzie, takie jak przypisania, struktury sterujące i wywołania metod. Ta metryka zapewnia bardziej skupiony punkt widzenia na faktycznie działające komponenty kodu, ujawniając wgląd w jego złożoność operacyjną. Duża liczba instrukcji może wskazywać na gęsto upakowaną logikę lub rozbudowane funkcjonalności, co może mieć wpływ na łatwość konserwacji i czytelność. I odwrotnie, niższa liczba może sugerować bardziej usprawnioną i potencjalnie wydajniejszą strukturę kodu.",
  functions:
    "Metryka „Funkcje” określa ilościowo liczbę funkcji lub metod w bazie kodu, służąc jako kluczowy wskaźnik jego modularyzacji i złożoności strukturalnej. Metryka ta pomaga w ocenie organizacji podziału odpowiedzialności. Optymalna liczba funkcji zwykle odzwierciedla dobrze ustrukturyzowany kod, ułatwiający konserwację, testowanie i skalowalność. Zbyt duża liczba może wskazywać na potrzebę refaktoryzacji w celu uproszczenia kodu, natomiast zbyt mała liczba funkcji może sugerować niedostateczną modularyzację, co może sprawić, że kod będzie mniej elastyczny i trudniejszy do zrozumienia.",
  files:
    "Metryka „Pliki” w oferuje prostą, ale istotną miarę: zlicza całkowitą liczbę plików w bazie kodu. Wskaźnik ten jest niezbędny do zrozumienia skali i organizacji projektu. Dobrze zorganizowana baza kodu ze zrównoważoną liczbą plików zazwyczaj wskazuje na dobrą modularyzację, ułatwiając konserwację i przejrzystość. I odwrotnie, zbyt wiele plików może sugerować nadmierną podział na przedziały, co może prowadzić do problemów w nawigacji i spójności, podczas gdy zbyt mało plików może wskazywać na monolityczną strukturę kodu, co może utrudniać modułowość i łatwość zrozumienia.",
  duplicatedLines:
    "Zduplikowane linie określają liczbę linii kodu, która jest zduplikowany w całej bazie kodu. Ta metryka rzuca światło na wydajność i oryginalność kodu. Wysoki poziom duplikacji może być sygnałem ostrzegawczym, wskazującym potencjalne problemy z utrzymaniem kodu, czytelnością i zwiększonym prawdopodobieństwem błędów, ponieważ zmiany wprowadzone w jednym miejscu mogą wymagać replikacji w innym. Redukcja zduplikowanych linii nie tylko usprawnia kod, czyniąc go bardziej zwięzłym i łatwiejszym w zarządzaniu, ale także pomaga w zmniejszeniu długu technicznego. Zachęca programistów do stosowania zasady DRY (Don't Repeat Yourself), promując bardziej modułowe struktury kodu nadające się do ponownego użycia.",
  commentLines:
    "Komentarze to całkowita liczbę wierszy w bazie kodu przeznaczonych na komentarze. Metryka ta jest kluczowa dla oceny poziomu dokumentacji i objaśnień w kodzie. Dobrze skomentowany kod jest często cechą dobrych praktyk tworzenia oprogramowania, poprawiającą czytelność, łatwość konserwacji i łatwość transferu wiedzy między programistami. Zrównoważony stosunek komentarzy do kodu może wskazywać, że baza kodu jest dobrze udokumentowana i potencjalnie łatwiejsza do zrozumienia dla nowych członków zespołu. Jednakże zbyt duża lub mała liczba wierszy komentarzy może również budzić niepokój; zbyt wiele komentarzy może sugerować nadmierne wyjaśnienia lub bałagan, natomiast zbyt mało może sugerować brak niezbędnej dokumentacji.",
  commentPercentage:
    "Procent komentarzy reprezentuje stosunek linii komentarzy do całkowitej liczby linii kodu, zapewniając kluczowy wgląd w gęstość dokumentacji bazy kodu. Metryka ta odgrywa zasadniczą rolę w ocenie równowagi pomiędzy kodem i jego dokumentacją.",
  bugs: "Bugi to rzeczywiste wady w kodzie, które mogą powodować błędy lub nieoczekiwane zachowanie programu. Ta metryka jest niezbędna do wskazania obszarów w kodzie, które wymagają natychmiastowej uwagi i korekty. Rozwiązanie problemów wskazanych przez ten wskaźnik nie tylko poprawia ogólną jakość i niezawodność oprogramowania, ale także odgrywa kluczową rolę w zapobieganiu przyszłym problemom operacyjnym. Utrzymując liczbę błędów na niskim poziomie, programiści zapewniają bardziej stabilną, wydajną i bezpieczną aplikację, zwiększając komfort i zaufanie użytkowników.",
  vulnerabilities:
    "Luki w zabezpieczeniach to słabe punkty bezpieczeństwa w bazie kodu. Ta metryka skanuje kod pod kątem potencjalnych luk, które mogą zostać wykorzystane przez osoby atakujące, takich jak wstrzykiwanie SQL, wykonywanie skryptów między witrynami lub niepewna obsługa danych. Szybkie eliminowanie luk w zabezpieczeniach jest kluczem do utrzymania solidnych standardów bezpieczeństwa, zapewnienia ochrony danych użytkowników oraz zachowania integralności i wiarygodności oprogramowania. Wskaźnik ten jest niezbędny do tworzenia bezpiecznych aplikacji w coraz bardziej świadomym bezpieczeństwie cyfrowym.",
  codeSmells:
    "Metryka „Pachnie kodem” w SonarQube ma na celu identyfikację potencjalnych problemów w kodzie, które choć niekoniecznie są nieprawidłowe, mogą wskazywać na głębsze problemy wpływające na łatwość konserwacji i czytelność. Te „zapachy” to wzorce lub praktyki, które mogą obniżyć jakość kodu, takie jak zbyt złożone metody, nadmiarowy kod lub niewłaściwe użycie obiektu. Rozwiązanie problemu zapachów kodu ma kluczowe znaczenie dla zapewnienia długoterminowej kondycji i wydajności kodu, ponieważ często utrudniają one zrozumienie i modyfikację kodu. Ta metryka pomaga programistom w ulepszaniu bazy kodu, promowaniu najlepszych praktyk i standardów czystego kodowania, które są niezbędne do sprawnego i wydajnego tworzenia oprogramowania.",
  debt: "Miara wysiłku mającego na celu naprawienie wszystkich zapachów kodu. Pomiar jest zapisywany w minutach. Jeżeli wartości podane są w dniach, przyjmuje się, że dzień liczy 8 godzin.",
};
